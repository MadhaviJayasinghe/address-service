package com.dexlk.address.model;

import com.amazonaws.services.dynamodbv2.datamodeling.*;

import java.io.Serializable;
import java.util.Map;
//import org.springframework.data.annotation.Id;
//import org.springframework.data.mongodb.core.mapping.Document;

//@Document(collection = "wallets")
@DynamoDBTable(tableName = "wallets")

public class Wallet implements Serializable {
    private static final long serialVersionUID = 1L;

    //    @Id
    private String id;

    private String walletAddress;

    private Number usdBalance;

    private Number bitcoinBalance;

    private String userId;

    public Wallet() {

    }

    public Wallet(String id, String walletAddress, Number usdBalance, Number bitcoinBalance, String userId) {
        this.id = id;
        this.walletAddress = walletAddress;
        this.usdBalance = usdBalance;
        this.bitcoinBalance = bitcoinBalance;
        this.userId = userId;
    }

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBAttribute
    public String getWalletAddress() {
        return walletAddress;
    }

    public void setWalletAddress(String walletAddress) {
        this.walletAddress = walletAddress;
    }

    @DynamoDBAttribute
    @DynamoDBTypeConverted(converter = BodyTypeConverter.class)
    public Number getUsdBalance() {
        return usdBalance;
    }

    public void setUsdBalance(Number usdBalance) {
        this.usdBalance = usdBalance;
    }

    @DynamoDBAttribute
    @DynamoDBTypeConverted(converter = BodyTypeConverter.class)
    public Number getBitcoinBalance() {
        return bitcoinBalance;
    }

    public void setBitcoinBalance(Number bitcoinBalance) {
        this.bitcoinBalance = bitcoinBalance;
    }

    @DynamoDBAttribute
    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    static public class BodyTypeConverter implements DynamoDBTypeConverter<String, Number> {

        @Override
        public String convert(Number object) {
            Number itemDimensions = (Number) object;

            // Convert the object to a DynamoDB json string
            String json = String.valueOf(itemDimensions);

            return json;        }

        @Override
        public Number unconvert(String s) {
            Number num = Integer.parseInt(s);
            return num;
        }

    }
}
